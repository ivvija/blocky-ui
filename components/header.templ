package components

import (
	"fmt"
	"github.com/ivvija/blocky-ui/api"
	"time"
)

templ HeaderBar(res api.StatusResponse) {
	<form
		id="headerForm"
		action="/"
		method="post"
		class="level is-mobile"
		hx-get="/"
		hx-trigger="every 10s"
		hx-target="#headerForm"
		hx-swap="outerHTML"
		hx-on--after-swap="updatePauseText()"
	>
		<div class="level-left is-flex-direction-row">
			<div class="level-item">
				<button
					id="toggleBtn"
					name="toggle"
					type="submit"
					class={ "button", statusClass(res.Status) }
					hx-post="/"
					hx-target="#headerForm"
					hx-swap="outerHTML"
					data-pause-end={ pauseEndIso(res) }
				>
					<span class="icon">
						@icon(statusIcon(res.Status))
					</span>
					<span id="toggleBtnText">
						{ statusText(res) }
					</span>
				</button>
			</div>
		</div>
		<div class="level-right  is-flex-direction-row">
			<div class="level-item">
				<button name="flush" type="submit" class="button" hx-post="/" hx-swap="none">
					<span class="icon">
						@icon("trash")
					</span>
				</button>
			</div>
			<div class="level-item">
				<button name="refresh" type="submit" class="button" hx-post="/" hx-swap="none">
					<span class="icon">
						@icon("refresh-cw")
					</span>
				</button>
			</div>
			<div class="level-item">
				if res.Status == api.Paused {
					<button
						name="togglePause"
						type="submit"
						class="button is-success"
						hx-post="/"
						hx-target="#headerForm"
						hx-swap="outerHTML"
					>
						<span class="icon">
							@icon("play")
						</span>
					</button>
				} else {
					<button
						name="togglePause"
						type="submit"
						class="button is-warning"
						hx-post="/"
						hx-target="#headerForm"
						hx-swap="outerHTML"
					>
						<span class="icon">
							@icon("pause")
						</span>
					</button>
				}
			</div>
		</div>
	</form>
}

func statusIcon(status int) string {
	switch status {
	case api.Enabled:
		return "shield"
	case api.Disabled:
		return "shield-off"
	case api.Paused:
		return "pause"
	default:
		return "frown"
	}
}

func statusClass(status int) string {
	switch status {
	case api.Enabled:
		return "is-success"
	case api.Disabled:
		return "is-danger"
	case api.Paused:
		return "is-warning"
	default:
		return "is-black"
	}
}

func statusText(res api.StatusResponse) string {
	switch res.Status {
	case api.Enabled:
		return "Blocky"
	case api.Disabled:
		return "Stopped"
	case api.Paused:
		return fmt.Sprintf("Paused until %s", res.PauseEnd.Format("15:04:05"))
	default:
		return fmt.Sprintf("Unk.Status: %d", res.Status)
	}
}

func pauseEndIso(res api.StatusResponse) string {
	if res.Status != api.Paused || res.PauseEnd.Before(time.Now()) {
		return ""
	}

	return res.PauseEnd.Format(time.RFC3339)
}
